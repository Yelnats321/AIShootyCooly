/*template<class EventList>
template<class Event>
std::shared_ptr<std::function<void(Event)>>
EventManager<EventList>::addListener(std::function<void(Event)> && func) {
	return std::make_shared<std::function<void(Event)>>(std::move(func));
}*/

template <class EventList>
template <
	typename Func
	, typename Event
	, typename
>
std::shared_ptr<std::function<void(Event)>> EventManager<EventList>::addListener(Func&& func) {
	return std::make_shared<std::function<void(Event)>>{std::move(func)};
}